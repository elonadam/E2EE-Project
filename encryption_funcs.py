# import hashlib
# import secrets
import bcrypt

"""
bcrypt.hashpw() takes a byte-string password and a salt (generated by bcrypt.gensalt())
 and returns a hashed password.
 
bcrypt.checkpw() verifies a plain-text password against a stored hash.

don't need to store the salt separately with bcrypt; it is embedded in the hash itself.

"""
def hash_password_bcrypt(password):
    """
    Hashes a password using bcrypt.

    Args:
        password (str): The plain-text password to hash.

    Returns:
        bytes: The bcrypt hash of the password.
    """
    # Generate a salt and hash the password
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode(), salt)
    print(f"inside hash_pw func, salt is {salt}, hashed is {hashed}\n")
    return hashed


def verify_password_bcrypt(password, hashed):
    """
    Verifies a password against a given bcrypt hash.

    Args:
        password (str): The plain-text password to verify.
        hashed (bytes): The bcrypt hash to verify against.

    Returns:
        bool: True if the password matches the hash, False otherwise.
    """
    print(
        f"inside verify func, password is {password} hashed as param is {hashed} \n bcrypt computed: {bcrypt.checkpw(password.encode(), hashed)}")
    return bcrypt.checkpw(password.encode(), hashed)
